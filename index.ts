// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetHostArgs, GetHostResult, GetHostOutputArgs } from "./getHost";
export const getHost: typeof import("./getHost").getHost = null as any;
export const getHostOutput: typeof import("./getHost").getHostOutput = null as any;
utilities.lazyLoad(exports, ["getHost","getHostOutput"], () => require("./getHost"));

export { GetHostgroupArgs, GetHostgroupResult, GetHostgroupOutputArgs } from "./getHostgroup";
export const getHostgroup: typeof import("./getHostgroup").getHostgroup = null as any;
export const getHostgroupOutput: typeof import("./getHostgroup").getHostgroupOutput = null as any;
utilities.lazyLoad(exports, ["getHostgroup","getHostgroupOutput"], () => require("./getHostgroup"));

export { GetProxyArgs, GetProxyResult, GetProxyOutputArgs } from "./getProxy";
export const getProxy: typeof import("./getProxy").getProxy = null as any;
export const getProxyOutput: typeof import("./getProxy").getProxyOutput = null as any;
utilities.lazyLoad(exports, ["getProxy","getProxyOutput"], () => require("./getProxy"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { GraphArgs, GraphState } from "./graph";
export type Graph = import("./graph").Graph;
export const Graph: typeof import("./graph").Graph = null as any;
utilities.lazyLoad(exports, ["Graph"], () => require("./graph"));

export { HostArgs, HostState } from "./host";
export type Host = import("./host").Host;
export const Host: typeof import("./host").Host = null as any;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));

export { HostgroupArgs, HostgroupState } from "./hostgroup";
export type Hostgroup = import("./hostgroup").Hostgroup;
export const Hostgroup: typeof import("./hostgroup").Hostgroup = null as any;
utilities.lazyLoad(exports, ["Hostgroup"], () => require("./hostgroup"));

export { ItemAgentArgs, ItemAgentState } from "./itemAgent";
export type ItemAgent = import("./itemAgent").ItemAgent;
export const ItemAgent: typeof import("./itemAgent").ItemAgent = null as any;
utilities.lazyLoad(exports, ["ItemAgent"], () => require("./itemAgent"));

export { ItemAggregateArgs, ItemAggregateState } from "./itemAggregate";
export type ItemAggregate = import("./itemAggregate").ItemAggregate;
export const ItemAggregate: typeof import("./itemAggregate").ItemAggregate = null as any;
utilities.lazyLoad(exports, ["ItemAggregate"], () => require("./itemAggregate"));

export { ItemCalculatedArgs, ItemCalculatedState } from "./itemCalculated";
export type ItemCalculated = import("./itemCalculated").ItemCalculated;
export const ItemCalculated: typeof import("./itemCalculated").ItemCalculated = null as any;
utilities.lazyLoad(exports, ["ItemCalculated"], () => require("./itemCalculated"));

export { ItemDependentArgs, ItemDependentState } from "./itemDependent";
export type ItemDependent = import("./itemDependent").ItemDependent;
export const ItemDependent: typeof import("./itemDependent").ItemDependent = null as any;
utilities.lazyLoad(exports, ["ItemDependent"], () => require("./itemDependent"));

export { ItemExternalArgs, ItemExternalState } from "./itemExternal";
export type ItemExternal = import("./itemExternal").ItemExternal;
export const ItemExternal: typeof import("./itemExternal").ItemExternal = null as any;
utilities.lazyLoad(exports, ["ItemExternal"], () => require("./itemExternal"));

export { ItemHttpArgs, ItemHttpState } from "./itemHttp";
export type ItemHttp = import("./itemHttp").ItemHttp;
export const ItemHttp: typeof import("./itemHttp").ItemHttp = null as any;
utilities.lazyLoad(exports, ["ItemHttp"], () => require("./itemHttp"));

export { ItemInternalArgs, ItemInternalState } from "./itemInternal";
export type ItemInternal = import("./itemInternal").ItemInternal;
export const ItemInternal: typeof import("./itemInternal").ItemInternal = null as any;
utilities.lazyLoad(exports, ["ItemInternal"], () => require("./itemInternal"));

export { ItemSimpleArgs, ItemSimpleState } from "./itemSimple";
export type ItemSimple = import("./itemSimple").ItemSimple;
export const ItemSimple: typeof import("./itemSimple").ItemSimple = null as any;
utilities.lazyLoad(exports, ["ItemSimple"], () => require("./itemSimple"));

export { ItemSnmpArgs, ItemSnmpState } from "./itemSnmp";
export type ItemSnmp = import("./itemSnmp").ItemSnmp;
export const ItemSnmp: typeof import("./itemSnmp").ItemSnmp = null as any;
utilities.lazyLoad(exports, ["ItemSnmp"], () => require("./itemSnmp"));

export { ItemSnmptrapArgs, ItemSnmptrapState } from "./itemSnmptrap";
export type ItemSnmptrap = import("./itemSnmptrap").ItemSnmptrap;
export const ItemSnmptrap: typeof import("./itemSnmptrap").ItemSnmptrap = null as any;
utilities.lazyLoad(exports, ["ItemSnmptrap"], () => require("./itemSnmptrap"));

export { ItemTrapperArgs, ItemTrapperState } from "./itemTrapper";
export type ItemTrapper = import("./itemTrapper").ItemTrapper;
export const ItemTrapper: typeof import("./itemTrapper").ItemTrapper = null as any;
utilities.lazyLoad(exports, ["ItemTrapper"], () => require("./itemTrapper"));

export { LldAgentArgs, LldAgentState } from "./lldAgent";
export type LldAgent = import("./lldAgent").LldAgent;
export const LldAgent: typeof import("./lldAgent").LldAgent = null as any;
utilities.lazyLoad(exports, ["LldAgent"], () => require("./lldAgent"));

export { LldDependentArgs, LldDependentState } from "./lldDependent";
export type LldDependent = import("./lldDependent").LldDependent;
export const LldDependent: typeof import("./lldDependent").LldDependent = null as any;
utilities.lazyLoad(exports, ["LldDependent"], () => require("./lldDependent"));

export { LldExternalArgs, LldExternalState } from "./lldExternal";
export type LldExternal = import("./lldExternal").LldExternal;
export const LldExternal: typeof import("./lldExternal").LldExternal = null as any;
utilities.lazyLoad(exports, ["LldExternal"], () => require("./lldExternal"));

export { LldHttpArgs, LldHttpState } from "./lldHttp";
export type LldHttp = import("./lldHttp").LldHttp;
export const LldHttp: typeof import("./lldHttp").LldHttp = null as any;
utilities.lazyLoad(exports, ["LldHttp"], () => require("./lldHttp"));

export { LldInternalArgs, LldInternalState } from "./lldInternal";
export type LldInternal = import("./lldInternal").LldInternal;
export const LldInternal: typeof import("./lldInternal").LldInternal = null as any;
utilities.lazyLoad(exports, ["LldInternal"], () => require("./lldInternal"));

export { LldSimpleArgs, LldSimpleState } from "./lldSimple";
export type LldSimple = import("./lldSimple").LldSimple;
export const LldSimple: typeof import("./lldSimple").LldSimple = null as any;
utilities.lazyLoad(exports, ["LldSimple"], () => require("./lldSimple"));

export { LldSnmpArgs, LldSnmpState } from "./lldSnmp";
export type LldSnmp = import("./lldSnmp").LldSnmp;
export const LldSnmp: typeof import("./lldSnmp").LldSnmp = null as any;
utilities.lazyLoad(exports, ["LldSnmp"], () => require("./lldSnmp"));

export { LldTrapperArgs, LldTrapperState } from "./lldTrapper";
export type LldTrapper = import("./lldTrapper").LldTrapper;
export const LldTrapper: typeof import("./lldTrapper").LldTrapper = null as any;
utilities.lazyLoad(exports, ["LldTrapper"], () => require("./lldTrapper"));

export { ProtoGraphArgs, ProtoGraphState } from "./protoGraph";
export type ProtoGraph = import("./protoGraph").ProtoGraph;
export const ProtoGraph: typeof import("./protoGraph").ProtoGraph = null as any;
utilities.lazyLoad(exports, ["ProtoGraph"], () => require("./protoGraph"));

export { ProtoItemAgentArgs, ProtoItemAgentState } from "./protoItemAgent";
export type ProtoItemAgent = import("./protoItemAgent").ProtoItemAgent;
export const ProtoItemAgent: typeof import("./protoItemAgent").ProtoItemAgent = null as any;
utilities.lazyLoad(exports, ["ProtoItemAgent"], () => require("./protoItemAgent"));

export { ProtoItemAggregateArgs, ProtoItemAggregateState } from "./protoItemAggregate";
export type ProtoItemAggregate = import("./protoItemAggregate").ProtoItemAggregate;
export const ProtoItemAggregate: typeof import("./protoItemAggregate").ProtoItemAggregate = null as any;
utilities.lazyLoad(exports, ["ProtoItemAggregate"], () => require("./protoItemAggregate"));

export { ProtoItemCalculatedArgs, ProtoItemCalculatedState } from "./protoItemCalculated";
export type ProtoItemCalculated = import("./protoItemCalculated").ProtoItemCalculated;
export const ProtoItemCalculated: typeof import("./protoItemCalculated").ProtoItemCalculated = null as any;
utilities.lazyLoad(exports, ["ProtoItemCalculated"], () => require("./protoItemCalculated"));

export { ProtoItemDependentArgs, ProtoItemDependentState } from "./protoItemDependent";
export type ProtoItemDependent = import("./protoItemDependent").ProtoItemDependent;
export const ProtoItemDependent: typeof import("./protoItemDependent").ProtoItemDependent = null as any;
utilities.lazyLoad(exports, ["ProtoItemDependent"], () => require("./protoItemDependent"));

export { ProtoItemExternalArgs, ProtoItemExternalState } from "./protoItemExternal";
export type ProtoItemExternal = import("./protoItemExternal").ProtoItemExternal;
export const ProtoItemExternal: typeof import("./protoItemExternal").ProtoItemExternal = null as any;
utilities.lazyLoad(exports, ["ProtoItemExternal"], () => require("./protoItemExternal"));

export { ProtoItemHttpArgs, ProtoItemHttpState } from "./protoItemHttp";
export type ProtoItemHttp = import("./protoItemHttp").ProtoItemHttp;
export const ProtoItemHttp: typeof import("./protoItemHttp").ProtoItemHttp = null as any;
utilities.lazyLoad(exports, ["ProtoItemHttp"], () => require("./protoItemHttp"));

export { ProtoItemInternalArgs, ProtoItemInternalState } from "./protoItemInternal";
export type ProtoItemInternal = import("./protoItemInternal").ProtoItemInternal;
export const ProtoItemInternal: typeof import("./protoItemInternal").ProtoItemInternal = null as any;
utilities.lazyLoad(exports, ["ProtoItemInternal"], () => require("./protoItemInternal"));

export { ProtoItemSimpleArgs, ProtoItemSimpleState } from "./protoItemSimple";
export type ProtoItemSimple = import("./protoItemSimple").ProtoItemSimple;
export const ProtoItemSimple: typeof import("./protoItemSimple").ProtoItemSimple = null as any;
utilities.lazyLoad(exports, ["ProtoItemSimple"], () => require("./protoItemSimple"));

export { ProtoItemSnmpArgs, ProtoItemSnmpState } from "./protoItemSnmp";
export type ProtoItemSnmp = import("./protoItemSnmp").ProtoItemSnmp;
export const ProtoItemSnmp: typeof import("./protoItemSnmp").ProtoItemSnmp = null as any;
utilities.lazyLoad(exports, ["ProtoItemSnmp"], () => require("./protoItemSnmp"));

export { ProtoItemSnmptrapArgs, ProtoItemSnmptrapState } from "./protoItemSnmptrap";
export type ProtoItemSnmptrap = import("./protoItemSnmptrap").ProtoItemSnmptrap;
export const ProtoItemSnmptrap: typeof import("./protoItemSnmptrap").ProtoItemSnmptrap = null as any;
utilities.lazyLoad(exports, ["ProtoItemSnmptrap"], () => require("./protoItemSnmptrap"));

export { ProtoItemTrapperArgs, ProtoItemTrapperState } from "./protoItemTrapper";
export type ProtoItemTrapper = import("./protoItemTrapper").ProtoItemTrapper;
export const ProtoItemTrapper: typeof import("./protoItemTrapper").ProtoItemTrapper = null as any;
utilities.lazyLoad(exports, ["ProtoItemTrapper"], () => require("./protoItemTrapper"));

export { ProtoTriggerArgs, ProtoTriggerState } from "./protoTrigger";
export type ProtoTrigger = import("./protoTrigger").ProtoTrigger;
export const ProtoTrigger: typeof import("./protoTrigger").ProtoTrigger = null as any;
utilities.lazyLoad(exports, ["ProtoTrigger"], () => require("./protoTrigger"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TemplateArgs, TemplateState } from "./template";
export type Template = import("./template").Template;
export const Template: typeof import("./template").Template = null as any;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));

export { TriggerArgs, TriggerState } from "./trigger";
export type Trigger = import("./trigger").Trigger;
export const Trigger: typeof import("./trigger").Trigger = null as any;
utilities.lazyLoad(exports, ["Trigger"], () => require("./trigger"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "zabbix:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "zabbix:index/graph:Graph":
                return new Graph(name, <any>undefined, { urn })
            case "zabbix:index/host:Host":
                return new Host(name, <any>undefined, { urn })
            case "zabbix:index/hostgroup:Hostgroup":
                return new Hostgroup(name, <any>undefined, { urn })
            case "zabbix:index/itemAgent:ItemAgent":
                return new ItemAgent(name, <any>undefined, { urn })
            case "zabbix:index/itemAggregate:ItemAggregate":
                return new ItemAggregate(name, <any>undefined, { urn })
            case "zabbix:index/itemCalculated:ItemCalculated":
                return new ItemCalculated(name, <any>undefined, { urn })
            case "zabbix:index/itemDependent:ItemDependent":
                return new ItemDependent(name, <any>undefined, { urn })
            case "zabbix:index/itemExternal:ItemExternal":
                return new ItemExternal(name, <any>undefined, { urn })
            case "zabbix:index/itemHttp:ItemHttp":
                return new ItemHttp(name, <any>undefined, { urn })
            case "zabbix:index/itemInternal:ItemInternal":
                return new ItemInternal(name, <any>undefined, { urn })
            case "zabbix:index/itemSimple:ItemSimple":
                return new ItemSimple(name, <any>undefined, { urn })
            case "zabbix:index/itemSnmp:ItemSnmp":
                return new ItemSnmp(name, <any>undefined, { urn })
            case "zabbix:index/itemSnmptrap:ItemSnmptrap":
                return new ItemSnmptrap(name, <any>undefined, { urn })
            case "zabbix:index/itemTrapper:ItemTrapper":
                return new ItemTrapper(name, <any>undefined, { urn })
            case "zabbix:index/lldAgent:LldAgent":
                return new LldAgent(name, <any>undefined, { urn })
            case "zabbix:index/lldDependent:LldDependent":
                return new LldDependent(name, <any>undefined, { urn })
            case "zabbix:index/lldExternal:LldExternal":
                return new LldExternal(name, <any>undefined, { urn })
            case "zabbix:index/lldHttp:LldHttp":
                return new LldHttp(name, <any>undefined, { urn })
            case "zabbix:index/lldInternal:LldInternal":
                return new LldInternal(name, <any>undefined, { urn })
            case "zabbix:index/lldSimple:LldSimple":
                return new LldSimple(name, <any>undefined, { urn })
            case "zabbix:index/lldSnmp:LldSnmp":
                return new LldSnmp(name, <any>undefined, { urn })
            case "zabbix:index/lldTrapper:LldTrapper":
                return new LldTrapper(name, <any>undefined, { urn })
            case "zabbix:index/protoGraph:ProtoGraph":
                return new ProtoGraph(name, <any>undefined, { urn })
            case "zabbix:index/protoItemAgent:ProtoItemAgent":
                return new ProtoItemAgent(name, <any>undefined, { urn })
            case "zabbix:index/protoItemAggregate:ProtoItemAggregate":
                return new ProtoItemAggregate(name, <any>undefined, { urn })
            case "zabbix:index/protoItemCalculated:ProtoItemCalculated":
                return new ProtoItemCalculated(name, <any>undefined, { urn })
            case "zabbix:index/protoItemDependent:ProtoItemDependent":
                return new ProtoItemDependent(name, <any>undefined, { urn })
            case "zabbix:index/protoItemExternal:ProtoItemExternal":
                return new ProtoItemExternal(name, <any>undefined, { urn })
            case "zabbix:index/protoItemHttp:ProtoItemHttp":
                return new ProtoItemHttp(name, <any>undefined, { urn })
            case "zabbix:index/protoItemInternal:ProtoItemInternal":
                return new ProtoItemInternal(name, <any>undefined, { urn })
            case "zabbix:index/protoItemSimple:ProtoItemSimple":
                return new ProtoItemSimple(name, <any>undefined, { urn })
            case "zabbix:index/protoItemSnmp:ProtoItemSnmp":
                return new ProtoItemSnmp(name, <any>undefined, { urn })
            case "zabbix:index/protoItemSnmptrap:ProtoItemSnmptrap":
                return new ProtoItemSnmptrap(name, <any>undefined, { urn })
            case "zabbix:index/protoItemTrapper:ProtoItemTrapper":
                return new ProtoItemTrapper(name, <any>undefined, { urn })
            case "zabbix:index/protoTrigger:ProtoTrigger":
                return new ProtoTrigger(name, <any>undefined, { urn })
            case "zabbix:index/template:Template":
                return new Template(name, <any>undefined, { urn })
            case "zabbix:index/trigger:Trigger":
                return new Trigger(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("zabbix", "index/application", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/graph", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/host", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/hostgroup", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/itemAgent", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/itemAggregate", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/itemCalculated", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/itemDependent", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/itemExternal", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/itemHttp", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/itemInternal", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/itemSimple", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/itemSnmp", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/itemSnmptrap", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/itemTrapper", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/lldAgent", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/lldDependent", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/lldExternal", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/lldHttp", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/lldInternal", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/lldSimple", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/lldSnmp", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/lldTrapper", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/protoGraph", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/protoItemAgent", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/protoItemAggregate", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/protoItemCalculated", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/protoItemDependent", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/protoItemExternal", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/protoItemHttp", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/protoItemInternal", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/protoItemSimple", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/protoItemSnmp", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/protoItemSnmptrap", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/protoItemTrapper", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/protoTrigger", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/template", _module)
pulumi.runtime.registerResourceModule("zabbix", "index/trigger", _module)
pulumi.runtime.registerResourcePackage("zabbix", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:zabbix") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
