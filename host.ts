// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Host extends pulumi.CustomResource {
    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostState, opts?: pulumi.CustomResourceOptions): Host {
        return new Host(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zabbix:index/host:Host';

    /**
     * Returns true if the given object is an instance of Host.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Host {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Host.__pulumiType;
    }

    /**
     * Enable host for monitoring
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Hostgroup IDs to associate this host with
     */
    public readonly groups!: pulumi.Output<string[]>;
    /**
     * FQDN of host
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * Host interfaces
     */
    public readonly interfaces!: pulumi.Output<outputs.HostInterface[]>;
    public readonly inventories!: pulumi.Output<outputs.HostInventory[] | undefined>;
    /**
     * Inventory Mode, one of: disabled, manual, automatic
     */
    public readonly inventoryMode!: pulumi.Output<string | undefined>;
    public readonly macros!: pulumi.Output<outputs.HostMacro[] | undefined>;
    /**
     * Zabbix host displayname, defaults to the value of "host"
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of proxy to monitor this host
     */
    public readonly proxyid!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<outputs.HostTag[] | undefined>;
    /**
     * Template IDs to attach to this host
     */
    public readonly templates!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Host resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostArgs | HostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["inventories"] = state ? state.inventories : undefined;
            resourceInputs["inventoryMode"] = state ? state.inventoryMode : undefined;
            resourceInputs["macros"] = state ? state.macros : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["proxyid"] = state ? state.proxyid : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templates"] = state ? state.templates : undefined;
        } else {
            const args = argsOrState as HostArgs | undefined;
            if ((!args || args.groups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groups'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.interfaces === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interfaces'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["inventories"] = args ? args.inventories : undefined;
            resourceInputs["inventoryMode"] = args ? args.inventoryMode : undefined;
            resourceInputs["macros"] = args ? args.macros : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["proxyid"] = args ? args.proxyid : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templates"] = args ? args.templates : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Host.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Host resources.
 */
export interface HostState {
    /**
     * Enable host for monitoring
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Hostgroup IDs to associate this host with
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * FQDN of host
     */
    host?: pulumi.Input<string>;
    /**
     * Host interfaces
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.HostInterface>[]>;
    inventories?: pulumi.Input<pulumi.Input<inputs.HostInventory>[]>;
    /**
     * Inventory Mode, one of: disabled, manual, automatic
     */
    inventoryMode?: pulumi.Input<string>;
    macros?: pulumi.Input<pulumi.Input<inputs.HostMacro>[]>;
    /**
     * Zabbix host displayname, defaults to the value of "host"
     */
    name?: pulumi.Input<string>;
    /**
     * ID of proxy to monitor this host
     */
    proxyid?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.HostTag>[]>;
    /**
     * Template IDs to attach to this host
     */
    templates?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Host resource.
 */
export interface HostArgs {
    /**
     * Enable host for monitoring
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Hostgroup IDs to associate this host with
     */
    groups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * FQDN of host
     */
    host: pulumi.Input<string>;
    /**
     * Host interfaces
     */
    interfaces: pulumi.Input<pulumi.Input<inputs.HostInterface>[]>;
    inventories?: pulumi.Input<pulumi.Input<inputs.HostInventory>[]>;
    /**
     * Inventory Mode, one of: disabled, manual, automatic
     */
    inventoryMode?: pulumi.Input<string>;
    macros?: pulumi.Input<pulumi.Input<inputs.HostMacro>[]>;
    /**
     * Zabbix host displayname, defaults to the value of "host"
     */
    name?: pulumi.Input<string>;
    /**
     * ID of proxy to monitor this host
     */
    proxyid?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.HostTag>[]>;
    /**
     * Template IDs to attach to this host
     */
    templates?: pulumi.Input<pulumi.Input<string>[]>;
}
